---
name: Build Release

on:
  pull_request:
    types: [closed]
    branches: [master]
  workflow_dispatch:
    inputs:
      BASELINE:
        description: 'Release branch'
        required: true
        default: 'master'

env:
  CI_EMAIL: ${{ secrets.CI_COMMIT_MAIL }}
  CI_USERNAME: ${{ secrets.CI_COMMIT_AUTHOR }}
  DEVELOP_BRANCH: develop
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release'))

    steps:
      - name: Get input parameters
        run: |
          echo "BASELINE_BRANCH=${{ github.event.inputs.BASELINE || github.ref }}" >> $GITHUB_ENV

      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASELINE_BRANCH }}
          fetch-depth: 0

      - name: Setup Maven Cache
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Java 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: obtain pom.xml version
        id: project
        run: |
          echo "version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: abort if SNAPSHOT
        if: "contains(steps.project.outputs.version, 'SNAPSHOT')"
        run: |
          echo "Version ${{ steps.project.outputs.version }} is not a properly named for RELEASE"
          exit 1

      - name: mvn build
        run: |
          mvn -B clean install

      - name: GitHub Release / Create release
        uses: ncipollo/release-action@2792aea87063cfd0d27953ac38e3ab45afacc154
        with:
          commit: ${{ env.BASELINE_BRANCH }}
          tag: ${{ steps.project.outputs.version }}
          name: ${{ steps.project.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Released version ${{ steps.project.outputs.version }} of QSAllComponents

      - name: Prepare git information
        run: |
          git config user.name "$CI_USERNAME"
          git config user.email "$CI_EMAIL"

      - name: bumping version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0-SNAPSHOT -DgenerateBackupPoms=false -DprocessAllModules=true

      - name: Create sync branch
        run: |
          version=${{ steps.project.outputs.version }}
          git checkout -b sync/release-$version-to-develop

          git add .
          git commit -m "Prepare next development iteration"
          git push origin sync/release-$version-to-develop

      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=${{ steps.project.outputs.version }}
          MESSAGE="
          Automated pull request for synchronizing released version ($version) into develop branch

          ### ðŸ’¡ Merge Strategy: Create a merge commit
          "
          gh pr create -B ${{ env.DEVELOP_BRANCH }} -H sync/release-$version-to-develop --title "Sync release $version to develop" --body "$(echo -e "$MESSAGE")"
