apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fullname" . }}
  labels:
    {{- include "labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
{{- if .Values.podsLabels }}
{{ toYaml .Values.podsLabels | indent 6 }}
{{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.version }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.configmap.enabled }}
          envFrom:
          - configMapRef:
              name: {{ .Values.configmap.name | default (printf "%s-config" (include "fullname" .)) }}
        {{- end }}
          env:
          - name: VERSION
            value: {{ .Chart.Version }}
{{- range $pkey, $pval := .Values.env }}
          - name: {{ $pkey }}
            value: {{ quote $pval }}
{{- end }}
          - name: NAME
            value: {{ (printf "%s" (include "fullname" .)) }}
          - name: HOST
            value: {{ .Values.ingress.host }}
          - name: JWT_PASSWORD_SECRET
            value: ld.a,#82xyz
          ports:
          - name: http
            containerPort: {{ .Values.service.internalPort }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
              port: {{ .Values.probePort | default .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.probePath | default .Values.probePath }}
              port: {{ .Values.probePort | default .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appwsc-qsallcomponent-jee-db
  labels:
    app.kubernetes.io/name: hsqldb
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hsqldb
  template:
    metadata:
      name: appwsc-qsallcomponent-jee-db
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: hsqldb
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}      
      containers:
        - name: appwsc-qsallcomponent-jee-db
          image: "ghcr.io/ontimize/appwsc-qsallcomponents/db:{{ .Values.image.version }}"
#          readinessProbe:
#            exec:
#              #command: [ "psql", "-w", "-U", "external_db_user", "-d", "external_db", "-c", "SELECT 1" ]
#              command:
#                - /bin/sh
#                - -c
#                - -e
#                - |
#                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
#                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
#            initialDelaySeconds: 15
#            timeoutSeconds: 2
          ports:
            - name: psql
              containerPort: 9001
#          livenessProbe:
#            exec:
#              #command: [ "psql", "-w", "-U", "external_db_user", "-d", "external_db", "-c", "SELECT 1" ]
#              command:
#                - /bin/sh
#                - -c
#                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
#            initialDelaySeconds: 45
#            timeoutSeconds: 2
