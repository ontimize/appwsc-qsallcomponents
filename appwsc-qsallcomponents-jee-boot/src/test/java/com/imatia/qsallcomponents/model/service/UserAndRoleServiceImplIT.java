package com.imatia.qsallcomponents.model.service;


import com.imatia.qsallcomponents.api.constants.entities.RoleServerPermission;
import com.imatia.qsallcomponents.api.constants.entities.User;
import com.imatia.qsallcomponents.api.services.IUserAndRoleService;
import com.imatia.qsallcomponents.model.dao.*;
import com.ontimize.jee.common.db.AdvancedEntityResult;
import com.ontimize.jee.common.dto.EntityResult;
import com.ontimize.jee.common.services.dms.IDMSService;
import com.ontimize.jee.server.services.dms.DMSCreationHelper;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = {CustomerService.class,
        CustomerDao.class,
        CustomerTypeDao.class,
        CustomerAccountDao.class,
        UserAndRoleServiceImpl.class,
        UserDao.class,
        UserRoleDao.class,
        RoleDao.class,
        ServerRoleDao.class,
        DMSCreationHelper.class
})
@ExtendWith(SpringExtension.class)
@EnableAutoConfiguration
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class UserAndRoleServiceImplIT {

    @Autowired
    IUserAndRoleService iUserAndRoleService;

    @MockBean
    IDMSService dmsService;

    @Autowired
    ServerRoleDao serverRoleDao;

    @BeforeAll
    static void initDataBase(@Autowired DataSource dataSource) throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();


        statement.execute("CREATE TABLE TUSER(USER_ VARCHAR(50) NOT NULL PRIMARY KEY," +
                "PASSWORD VARCHAR(50)," +
                "NAME VARCHAR(50)," +
                "SURNAME VARCHAR(50)," +
                "EMAIL VARCHAR(50)," +
                "NIF VARCHAR(50))");
        statement.executeUpdate("INSERT INTO TUSER VALUES('block','demouser','User blocked','Bloqueo','User Bloked',NULL)");
        statement.executeUpdate("INSERT INTO TUSER VALUES('demo','demouser','demo','demo',NULL,'44460713B')");
        statement.executeUpdate("INSERT INTO TUSER VALUES('demo2','demoDos','demo','demo Dos','demo.dos@imatia.com',NULL)");


        statement.execute("CREATE TABLE TROLE(ID_ROLENAME INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ROLENAME VARCHAR(255))");
        statement.executeUpdate("INSERT INTO TROLE VALUES(0,'admin')");
        statement.executeUpdate("INSERT INTO TROLE VALUES(1,'user')");


        statement.execute("CREATE TABLE TUSER_ROLE(ID_USER_ROLE INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ID_ROLENAME INTEGER," +
                "USER_ VARCHAR(50))");
        statement.executeUpdate("INSERT INTO TUSER_ROLE VALUES(0,0,'demo')");
        statement.executeUpdate("INSERT INTO TUSER_ROLE VALUES(1,0,'block')");
        statement.executeUpdate("INSERT INTO TUSER_ROLE VALUES(2,0,'pablo.martinez')");

        statement.execute("CREATE TABLE TROLE_SERVER_PERMISSION(ID_ROLE_SERVER_PERMISSION INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ID_ROLENAME INTEGER," +
                "ID_SERVER_PERMISSION INTEGER)");
        statement.executeUpdate("INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,0,0)");
        statement.executeUpdate("INSERT INTO TROLE_SERVER_PERMISSION VALUES(1,0,1)");
        statement.executeUpdate("INSERT INTO TROLE_SERVER_PERMISSION VALUES(2,0,2)");



        statement.execute("CREATE TABLE TSERVER_PERMISSION(ID_SERVER_PERMISSION INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,PERMISSION_NAME VARCHAR(16777216))");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContentOfVersion')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperty')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileRecoverPreviousVersion')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDeleteProperties')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperties')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetAllFiles')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/setRelatedDocuments')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentAddProperties')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/getRelatedDocument')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryGetForDocument')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/moveFilesToCategory')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileVersionQuery')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentQuery')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentInsert')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentUpdate')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetFiles')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryInsert')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileInsert')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryUpdate')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryDelete')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileDelete')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetVersions')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContent')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileUpdate')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDelete')");
        statement.executeUpdate("INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileQuery')");



    }


    @AfterAll
    static void tearDown(@Autowired DataSource dataSource) throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();

        statement.executeUpdate("DROP TABLE TUSER");
        statement.executeUpdate("DROP TABLE TROLE");
        statement.executeUpdate("DROP TABLE TUSER_ROLE");
        statement.executeUpdate("DROP TABLE TROLE_SERVER_PERMISSION");
        statement.executeUpdate("DROP TABLE TSERVER_PERMISSION");

    }

    @Nested
    class UserCRUD {

        @Test
        void when_userQuery_receive_keysValues_and_attributes_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap<>();
            keysValues.put("USER_", "block");

            List<String> attributes = new ArrayList<>();
            attributes.add("USER_");
            attributes.add("PASSWORD");
            attributes.add("NAME");
            attributes.add("SURNAME");
            attributes.add("EMAIL");
            attributes.add("NIF");

            EntityResult result = iUserAndRoleService.userQuery(keysValues, attributes);
            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals("block", recordValues.get("USER_"));
            assertEquals("demouser", recordValues.get("PASSWORD"));

        }

        @Test
        void when_userPaginationQuery_receive_keysValues_and_attributes_and_recordNumber_and_startIndex_and_orderBy_expected_AdvancedEntityResult() {
            Map<String, Object> keysValues = new HashMap<>();
            keysValues.put("USER_", "block");

            List<String> attributes = new ArrayList<>();
            attributes.add("USER_");
            attributes.add("PASSWORD");
            attributes.add("NAME");
            attributes.add("SURNAME");
            attributes.add("EMAIL");
            attributes.add("NIF");

            int recordNumber = 5;
            int startIndex = 3;
            List<String> orderBy = new ArrayList<>();

            AdvancedEntityResult result = iUserAndRoleService.userPaginationQuery(keysValues, attributes, 3, 0, orderBy);
            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals("block", recordValues.get("USER_"));
            assertEquals("demouser", recordValues.get("PASSWORD"));

        }

        @Test
        void when_userInsert_receive_keysValues_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap<>();
            keysValues.put("USER_", "insert");
            keysValues.put("PASSWORD", "password");
            keysValues.put("NAME", "name");
            keysValues.put("SURNAME", "surname");
            keysValues.put("EMAIL", "correo");
            keysValues.put("NIF", "36363636T");

            iUserAndRoleService.userInsert(keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("USER_");
            attributes.add("PASSWORD");
            attributes.add("NAME");
            attributes.add("SURNAME");
            attributes.add("EMAIL");
            attributes.add("NIF");

            EntityResult result = iUserAndRoleService.userQuery(keysValues, attributes);
            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals("insert", recordValues.get("USER_"));
            assertEquals("password", recordValues.get("PASSWORD"));


        }

        @Test
        void when_userUpdate_receive_attributesValues_and_keyValues_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("USER_", "demo2");

            Map<String, Object> attributesValues = new HashMap();
            attributesValues.put("PASSWORD", "Update");

            iUserAndRoleService.userUpdate(attributesValues, keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("USER_");
            attributes.add("PASSWORD");

            EntityResult result = iUserAndRoleService.userQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals("demo2", recordValues.get("USER_"));
            assertEquals("Update", recordValues.get("PASSWORD"));

        }



        @Disabled
        @Test
        void when_userDelete_receive_keysValues_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("USER_", "demo2");

            Map<String, Object> updateValues = new HashMap<String, Object>();
            updateValues.put("PASSWORD", "UpdateDos");

            iUserAndRoleService.userUpdate(updateValues, keysValues);

            iUserAndRoleService.userDelete(keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("USER_");
            attributes.add("PASSWORD");
            attributes.add("NAME");
            attributes.add("SURNAME");
            attributes.add("EMAIL");
            attributes.add("NIF");

            EntityResult result = iUserAndRoleService.userQuery(keysValues, attributes);
            assertNull(result.getRecordValues(0).get("USER_"));
        }
    }

    @Nested
    class RoleCRUD {

        @Test
        void when_roleQuery_receive_keysValues_and_attributes_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ID_ROLENAME", 0);

            List<String> attributes = new ArrayList<>();
            attributes.add("ID_ROLENAME");
            attributes.add("ROLENAME");

            EntityResult result = iUserAndRoleService.roleQuery(keysValues, attributes);
            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals(0, recordValues.get("ID_ROLENAME"));
            assertEquals("admin", recordValues.get("ROLENAME"));
        }

        @Test
        void when_roleInsert_receive_keysValues_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ID_ROLENAME", 2);
            keysValues.put("ROLENAME", "insert");

            iUserAndRoleService.roleInsert(keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("ID_ROLENAME");
            attributes.add("ROLENAME");

            EntityResult result = iUserAndRoleService.roleQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals(2, recordValues.get("ID_ROLENAME"));
            assertEquals("insert", recordValues.get("ROLENAME"));
        }

        @Test
        void when_roleUpdate_receive_attributes_and_keyValues_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ID_ROLENAME", 1);

            Map<String, Object> attributesValues = new HashMap();
            attributesValues.put("ROLENAME", "Update");

            iUserAndRoleService.roleUpdate(attributesValues, keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("ID_ROLENAME");
            attributes.add("ROLENAME");

            EntityResult result = iUserAndRoleService.roleQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals(1, recordValues.get("ID_ROLENAME"));
            assertEquals("Update", recordValues.get("ROLENAME"));

        }

        @Test
        void when_roleDelete_receive_keyValues_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ID_ROLENAME", 1);

            serverRoleDao.unsafeDelete(keysValues);

            Map<String, Object> attributesValues = new HashMap();
            attributesValues.put("ROLENAME", "Update");

            iUserAndRoleService.roleDelete(keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("ID_ROLENAME");
            attributes.add("ROLENAME");

            EntityResult result = iUserAndRoleService.roleQuery(keysValues, attributes);
            assertNull(result.getRecordValues(0).get("USER_"));

        }
    }

    @Nested
    class ServerRole {


        @Test
        void when_serverRoleQuery_receive_keysValues_and_attributes_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ID_ROLE_SERVER_PERMISSION", 0);
            keysValues.put("ID_ROLENAME",0);

            List<String> attributes = new ArrayList<>();
            attributes.add("ID_ROLE_SERVER_PERMISSION");
            attributes.add("ID_ROLENAME");
            attributes.add("ID_SERVER_PERMISSION");

            EntityResult result = iUserAndRoleService.serverRoleQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);
            assertEquals(0, recordValues.get("ID_ROLE_SERVER_PERMISSION"));
            assertEquals(0, recordValues.get("ID_ROLENAME"));

        }

        @Disabled
        @Test
        void when_serverRoleUpdate_receive_attributesValues_and_keysValues_expected_null() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ID_ROLE_SERVER_PERMISSION", 2);

            Map<String, Object> attributesValues = new HashMap();
            attributesValues.put("ID_ROLE_SERVER_PERMISSION",2);
            attributesValues.put("ID_ROLENAME",0);
            attributesValues.put("ID_SERVER_PERMISSION", 2);

            iUserAndRoleService.serverRoleUpdate(attributesValues,keysValues);

            List<String> attributes = new ArrayList<>();
            attributes.add("ID_ROLE_SERVER_PERMISSION");
            attributes.add("ID_ROLENAME");
            attributes.add("ID_SERVER_PERMISSION");

            EntityResult result = iUserAndRoleService.serverRoleQuery(keysValues, attributes);
            assertNull(result.getRecordValues(0).get("ID_ROLE_SERVER_PERMISSION"));







        }

    }

}
