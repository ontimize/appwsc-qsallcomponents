package com.imatia.qsallcomponents.model.service;

import com.imatia.qsallcomponents.api.services.IEmployeeService;
import com.imatia.qsallcomponents.model.dao.EmployeeDao;
import com.imatia.qsallcomponents.model.dao.EmployeeTypeDao;
import com.ontimize.jee.common.dto.EntityResult;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(classes = {
        EmployeeService.class,
        EmployeeDao.class,
        EmployeeTypeDao.class
})
@ExtendWith(SpringExtension.class)
@EnableAutoConfiguration
@TestInstance(Lifecycle.PER_CLASS)
public class EmployeeServiceIT {

    @Autowired
    IEmployeeService iemployeeService;


    @Autowired
    EmployeeDao employeeDao;

    @Autowired
    DataSource dataSource;

    @BeforeAll
    void initDataBase() throws SQLException {
        dataSource.getConnection().createStatement().execute("CREATE TABLE employees (employeeid INT NOT NULL, name VARCHAR(50) NOT NULL,"
                + "email VARCHAR(50) NOT NULL,"
                + "uniqueid INT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL, PRIMARY KEY (employeeid))");
        dataSource.getConnection().createStatement().executeUpdate("INSERT INTO employees VALUES (1001,'Vinod', 'vinod@imatia.com', 0)");
        dataSource.getConnection().createStatement().executeUpdate("INSERT INTO employees VALUES (1002,'Dhwani', 'dhwani@imatia.com', 1)");
        dataSource.getConnection().createStatement().executeUpdate("INSERT INTO employees VALUES (1003,'Asmi', 'asmi@imatia.com', 2)");
        dataSource.getConnection().createStatement().executeUpdate("INSERT INTO employees VALUES (1004,'Caroline', 'caroline@imatia.com', 3)");
        dataSource.getConnection().createStatement().executeUpdate("INSERT INTO employees VALUES (1005,'Cris', 'cris@imatia.com', 4)");



    }

    @Nested
    class EmployeeQuery {


        @Test
        void when_employeeQuery_receive() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("employeeid", 1001);

            List<String> attributes = new ArrayList();
            attributes.add("employeeid");
            attributes.add("name");
            attributes.add("email");

            List<String> orderBy = new ArrayList();
            orderBy.add("name");

            EntityResult result = iemployeeService.employeeQuery(keysValues, attributes);
            // Get one record
            assertEquals(1001, result.getRecordValues(0).get("employeeid"));

            // Get all records ordered by name
            //assertEquals("Cris", result.getRecordValues(4).get("name"));

            // Get all records
            assertEquals(4, result.calculateRecordNumber());
        }
    }


}
