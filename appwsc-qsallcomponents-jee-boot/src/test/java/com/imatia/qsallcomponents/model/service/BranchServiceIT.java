package com.imatia.qsallcomponents.model.service;


import com.imatia.qsallcomponents.api.services.IBranchService;
import com.imatia.qsallcomponents.model.dao.AccountDao;
import com.imatia.qsallcomponents.model.dao.AccountTypeDao;
import com.imatia.qsallcomponents.model.dao.BranchDao;
import com.ontimize.jee.common.db.AdvancedEntityResult;
import com.ontimize.jee.common.dto.EntityResult;
import com.ontimize.jee.common.dto.EntityResultMapImpl;
import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException;
import com.ontimize.jee.server.dao.DefaultOntimizeDaoHelper;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = {
        BranchService.class,
        BranchDao.class,
        AccountDao.class,
        AccountTypeDao.class
})
@ExtendWith(SpringExtension.class)
@EnableAutoConfiguration
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class BranchServiceIT {


    @Autowired
    IBranchService iBranchService;

    @Autowired
    DataSource dataSource;

    @Autowired
    DefaultOntimizeDaoHelper daoHelper;

    @Autowired
    AccountDao accountDao;


    @BeforeAll
    void initDataBase() throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();


        statement.execute("CREATE TABLE BRANCHES(OFFICEID INT NOT NULL PRIMARY KEY,"
                + "NAME VARCHAR(50),"
                + "ADDRESS VARCHAR(255),"
                + "PHONE VARCHAR(50))");
        statement.executeUpdate("INSERT INTO BRANCHES VALUES (0001,'IMATIABANK', 'VIGO', '012012012')");
        statement.executeUpdate("INSERT INTO BRANCHES VALUES (0002,'KUTXA', 'PONTEVEDRA', '234234234')");
        statement.executeUpdate("INSERT INTO BRANCHES VALUES (0003,'ABANCA', 'OURENSE', '57567567')");


        statement.execute("CREATE TABLE ACCOUNTS(ACCOUNTID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ENTITYID VARCHAR(50) NOT NULL," +
                "OFFICEID VARCHAR(50) NOT NULL," +
                "CDID VARCHAR(50)," +
                "ANID VARCHAR(50)," +
                "STARTDATE TIMESTAMP," +
                "ENDDATE TIMESTAMP," +
                "INTERESRATE DOUBLE," +
                "ACCOUNTTYP VARCHAR(255)," +
                "ACCOUNTTYPEID INTEGER)");

        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(1,'2095','0002','34','0000000010','2018-02-21 22:42:23.248000',NULL,0.009899999999999999E0,'Savings account',1)");
        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(2,'2095','0000','00','0000000002','2018-01-16 14:52:22.486000',NULL,0.0125E0,'Personal account',0)");
        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(3,'2095','0000','00','0000000003','2018-02-15 06:10:48.576000',NULL,0.043E0,'Savings account',1)");


        statement.execute("CREATE TABLE MOVEMENTS(MOVEMENTID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ACCOUNTID INTEGER NOT NULL," +
                "CONCEPT VARCHAR(50)," +
                "MOVEMENTTYPEID INTEGER," +
                "MOVEMENT DOUBLE)");
        statement.executeUpdate("INSERT INTO MOVEMENTS VALUES(75739,1,'First movement',1,3225.54E0)");
        statement.executeUpdate("INSERT INTO MOVEMENTS VALUES(75740,2,'Account registration',1,7498.78E0)");
        statement.executeUpdate("INSERT INTO MOVEMENTS VALUES(75741,3,'Open account',1,9461.98E0)");


        statement.execute("CREATE TABLE ACCOUNTTYPES(ACCOUNTTYPEID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ACCOUNTTYPENAME VARCHAR(100) NOT NULL)");
        statement.executeUpdate("INSERT INTO ACCOUNTTYPES VALUES(0,'Checking')");
        statement.executeUpdate("INSERT INTO ACCOUNTTYPES VALUES(1,'Savings')");
        statement.executeUpdate("INSERT INTO ACCOUNTTYPES VALUES(2,'Market')");


        statement.execute("CREATE TABLE MOVEMENTTYPES(MOVEMENTTYPEID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "DESCRIPTION VARCHAR(50)," +
                "DESCRIPTION_EN_US VARCHAR(50)," +
                "DESCRIPTION_ES_ES VARCHAR(50)," +
                "DESCRIPTION_GL_ES VARCHAR(50))");
        statement.executeUpdate("INSERT INTO MOVEMENTTYPES VALUES(1,'Transfer','Transfer','Transfer','Transfer')");
        statement.executeUpdate("INSERT INTO MOVEMENTTYPES VALUES(2,'Automatic Cash','Automatic Cash','Automatic Cash','Automatic Cash')");
        statement.executeUpdate("INSERT INTO MOVEMENTTYPES VALUES(3,'Salary','Salary','Salary','Salary')");


    }


    @AfterAll
    void tearDown() throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();

        statement.executeUpdate("DROP TABLE BRANCHES");
        statement.executeUpdate("DROP TABLE ACCOUNTS");
        statement.executeUpdate("DROP TABLE MOVEMENTS");
        statement.executeUpdate("DROP TABLE ACCOUNTTYPES");
        statement.executeUpdate("DROP TABLE MOVEMENTTYPES");

    }

    @Nested
    class BranchCRUD {


        @Test
        void when_branchQuery_receive_keysValues_and_attributes_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0001);

            List<String> attributes = new ArrayList();
            attributes.add("OFFICEID");
            attributes.add("NAME");
            attributes.add("ADDRESS");
            attributes.add("PHONE");

            EntityResult result = iBranchService.branchQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals(0001, recordValues.get("OFFICEID"));

            assertEquals("IMATIABANK", recordValues.get("NAME"));

        }


        @Test
        void when_branchPaginationQuery_receive_keysValues_and_attributes_and_recordNumber_and_startIndex_and_orderBy_expected_AdvacedEntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0001);

            List<String> attributes = new ArrayList();
            attributes.add("OFFICEID");
            attributes.add("NAME");
            attributes.add("ADDRESS");
            attributes.add("PHONE");

            List<Object> orderBy = new ArrayList();
            orderBy.add("NAME");

            AdvancedEntityResult eResult = iBranchService.branchPaginationQuery(keysValues, attributes, 3, 0, orderBy);

            assertEquals(1, eResult.calculateRecordNumber());
            Map recordValues = eResult.getRecordValues(0);

            assertEquals(0001, recordValues.get("OFFICEID"));

            assertEquals("IMATIABANK", recordValues.get("NAME"));

        }

        @Test
        void when_branchInsert_receive_attributes_expected_EntityResult() {

            Map<String, Object> attributesValues = new HashMap();
            attributesValues.put("OFFICEID", 0004);
            attributesValues.put("NAME", "KUTXA2");
            attributesValues.put("ADDRESS", "MOS");
            attributesValues.put("PHONE", 987654321);

            iBranchService.branchInsert(attributesValues);

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("NAME", "KUTXA2");

            List<String> attributesList = new ArrayList();
            attributesList.add("OFFICEID");
            attributesList.add("NAME");
            attributesList.add("ADDRESS");
            attributesList.add("PHONE");
            EntityResult eResultQuery = iBranchService.branchQuery(keysValues, attributesList);

            assertEquals(0004, eResultQuery.getRecordValues(0).get("OFFICEID"));

            assertEquals("KUTXA2", eResultQuery.getRecordValues(0).get("NAME"));
            assertEquals("987654321", eResultQuery.getRecordValues(0).get("PHONE"));

        }

        @Test
        void when_branchUpdate_receive_attributes_and_keysValues_expected_EntityResult() {

            Map<String, Object> attributes = new HashMap();
            attributes.put("NAME", "Coincidir");

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0003);

            iBranchService.branchUpdate(attributes, keysValues);

            List<String> attributesList = new ArrayList();
            attributesList.add("OFFICEID");
            attributesList.add("NAME");
            attributesList.add("ADDRESS");
            attributesList.add("PHONE");

            EntityResult result = iBranchService.branchQuery(keysValues, attributesList);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals("Coincidir", result.getRecordValues(0).get("NAME"));

            assertEquals(0003, recordValues.get("OFFICEID"));

        }

        @Test
        void when_branchDelete_receive_keysValues_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0004);

            iBranchService.branchDelete(keysValues);

            List<String> attributesList = new ArrayList();
            attributesList.add("OFFICEID");
            attributesList.add("NAME");
            attributesList.add("ADDRESS");
            attributesList.add("PHONE");
            EntityResult eResultQuery = iBranchService.branchQuery(keysValues, attributesList);

            assertNull(eResultQuery.getRecordValues(0).get("OFFICEID"));

        }

    }

    @Nested
    class AcountsCRUD {


        @Test
        void when_accountQuery_receive_keysValues_and_attributes_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 1);

            List<String> attributes = new ArrayList();
            attributes.add("ACCOUNTID");
            attributes.add("ENTITYID");
            attributes.add("OFFICEID");
            attributes.add("CDID");
            attributes.add("ANID");
            attributes.add("INTERESRATE");
            attributes.add("ACCOUNTTYP");
            attributes.add("ACCOUNTTYPEID");

            EntityResult result = iBranchService.accountQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals(1, recordValues.get("ACCOUNTID"));

            assertEquals("2095", recordValues.get("ENTITYID"));
            assertEquals("Savings account", recordValues.get("ACCOUNTTYP"));
        }

        @Test
        void when_accountPaginationQuery_receive_keysValues_and_attributes_and_recordNumber_and_startIndex_and_orderBy_expected_AdvacedEntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 1);

            List<String> attributes = new ArrayList();
            attributes.add("ACCOUNTID");
            attributes.add("ENTITYID");
            attributes.add("OFFICEID");
            attributes.add("CDID");
            attributes.add("ANID");
            attributes.add("INTERESRATE");
            attributes.add("ACCOUNTTYP");
            attributes.add("ACCOUNTTYPEID");

            List<Object> orderBy = new ArrayList();
            orderBy.add("ACCOUNTTYP");

            AdvancedEntityResult eResult = iBranchService.accountPaginationQuery(keysValues, attributes, 3, 0, orderBy);

            assertEquals(1, eResult.calculateRecordNumber());
            Map recordValues = eResult.getRecordValues(0);
            assertEquals(1, recordValues.get("ACCOUNTID"));

            assertEquals("2095", recordValues.get("ENTITYID"));
            assertEquals("Savings account", recordValues.get("ACCOUNTTYP"));

        }

        @Test
        void when_accountInsert_receive_attributes_expected_accountUpdate_EntityResult() {
            Map<String, Object> attributes = new HashMap<>();
            attributes.put("OFFICEID", 2);
            attributes.put("ENTITYID", 2095);

            EntityResult toRet = iBranchService.accountInsert(attributes);

            assertEquals(5, toRet.get("ACCOUNTID"));
        }


        @Test
        void when_accountInsert_receive_attributes_expected_accountUpdate_EntityResult_OPERATION_WRONG() {
            Map<String, Object> attributes = new HashMap<>();
            attributes.put("OFFICEID", 0);
            attributes.remove(AccountDao.ATTR_ANID);
            attributes.remove(AccountDao.ATTR_CDID);

            EntityResult toRet = new EntityResultMapImpl();
            toRet.put("ACCOUNTID", 4);
            toRet.setCode(1);
            toRet.get(iBranchService.accountInsert(attributes));

            assertEquals("EntityResult:  ERROR CODE RETURN:  : {ACCOUNTID=4}", toRet.toString());
        }

        @Test
        void when_accountUpdate_receive_attributes_and_keysValues_expected_EntityResult() {

            Map<String, Object> attributes = new HashMap();
            attributes.put("ACCOUNTTYPEID", 2);

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 3);

            iBranchService.accountUpdate(attributes, keysValues);

            List<String> attributesList = new ArrayList();
            attributesList.add("ACCOUNTID");
            attributesList.add("ENTITYID");
            attributesList.add("OFFICEID");
            attributesList.add("CDID");
            attributesList.add("ANID");
            attributesList.add("INTERESRATE");
            attributesList.add("ACCOUNTTYP");
            attributesList.add("ACCOUNTTYPEID");

            EntityResult result = iBranchService.accountQuery(keysValues, attributesList);

            assertEquals(1, result.calculateRecordNumber());
            assertEquals(2, result.getRecordValues(0).get("ACCOUNTTYPEID"));

        }

        @Test
        void when_accountDelete_receive_keysValues_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 2);

            List<String> attributes = new ArrayList();
            attributes.add("ACCOUNTID");
            attributes.add("ENTITYID");
            attributes.add("OFFICEID");
            attributes.add("CDID");
            attributes.add("ANID");
            attributes.add("INTERESRATE");
            attributes.add("ACCOUNTTYP");
            attributes.add("ACCOUNTTYPEID");

            iBranchService.accountDelete(keysValues);
            EntityResult eResultQuery = iBranchService.accountQuery(keysValues, attributes);

            assertNull(eResultQuery.getRecordValues(0).get("ACCOUNTID"));
        }

        @Test
        void when_accountTypeAggregateQuery_receive_attributes_and_keysValues_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 2);

            List<String> attributes = new ArrayList();
            attributes.add("ACCOUNTID");
            attributes.add("ENTITYID");
            attributes.add("OFFICEID");
            attributes.add("CDID");
            attributes.add("ANID");
            attributes.add("INTERESRATE");
            attributes.add("ACCOUNTTYP");
            attributes.add("ACCOUNTTYPEID");

            EntityResult entityResult = iBranchService.accountTypeAggregateQuery(keysValues, attributes);
            assertNotNull(entityResult);

        }


    }

    @Nested
    class AccountsConcepts {

        @Test
        void when_accountConceptsQuery_receive_keysValues_and_attributes_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 1);

            List<String> attributes = new ArrayList();
            attributes.add("ACCOUNTID");
            attributes.add("ENTITYID");
            attributes.add("OFFICEID");
            attributes.add("CDID");
            attributes.add("ANID");
            attributes.add("INTERESRATE");
            attributes.add("ACCOUNTTYP");
            attributes.add("ACCOUNTTYPEID");

            EntityResult result = iBranchService.accountConceptsQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals(1, recordValues.get("ACCOUNTID"));

            assertEquals("First movement", recordValues.get("CONCEPT"));
        }

    }

    @Nested
    class AccountMovementTypes {

        @Test
        void when_accountMovementTypesQuery_receive_keysValues_and_attributes_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("ACCOUNTID", 1);

            List<String> attributes = new ArrayList();
            attributes.add("ACCOUNTID");
            attributes.add("ENTITYID");
            attributes.add("OFFICEID");
            attributes.add("CDID");
            attributes.add("ANID");
            attributes.add("INTERESRATE");
            attributes.add("ACCOUNTTYP");
            attributes.add("ACCOUNTTYPEID");

            EntityResult result = iBranchService.accountMovementTypesQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals(1, recordValues.get("ACCOUNTID"));

            assertEquals("Transfer", recordValues.get("DESCRIPTION"));
        }

    }


}
