package com.imatia.qsallcomponents.model.service;


import com.imatia.qsallcomponents.api.services.IBranchService;
import com.imatia.qsallcomponents.model.dao.AccountDao;
import com.imatia.qsallcomponents.model.dao.AccountTypeDao;
import com.imatia.qsallcomponents.model.dao.BranchDao;
import com.ontimize.jee.common.db.AdvancedEntityResult;
import com.ontimize.jee.common.dto.EntityResult;
import com.ontimize.jee.server.dao.DefaultOntimizeDaoHelper;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

@SpringBootTest(classes = {
        BranchService.class,
        BranchDao.class,
        AccountDao.class,
        AccountTypeDao.class
})
@ExtendWith(SpringExtension.class)
@EnableAutoConfiguration
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class BranchServiceIT {


    @Autowired
    IBranchService iBranchService;

    @Autowired
    DataSource dataSource;

    @Autowired
    BranchDao branchDao;

    @Autowired
    AccountDao accountDao;

    @Autowired
    AccountTypeDao accountTypeDao;

    @Autowired
    DefaultOntimizeDaoHelper daoHelper;


    @BeforeAll
    void initDataBase() throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();


        statement.execute("CREATE TABLE BRANCHES(OFFICEID INT NOT NULL PRIMARY KEY,"
                + "NAME VARCHAR(50),"
                + "ADDRESS VARCHAR(255),"
                + "PHONE VARCHAR(50))");
        statement.executeUpdate("INSERT INTO BRANCHES VALUES (0001,'IMATIABANK', 'VIGO', '012012012')");
        statement.executeUpdate("INSERT INTO BRANCHES VALUES (0002,'KUTXA', 'PONTEVEDRA', '234234234')");
        statement.executeUpdate("INSERT INTO BRANCHES VALUES (0003,'ABANCA', 'OURENSE', '57567567')");


        statement.execute("CREATE TABLE ACCOUNTS(ACCOUNTID INT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ENTITYID VARCHAR(50) NOT NULL," +
                "OFFICEID VARCHAR(50) NOT NULL," +
                "CDID VARCHAR(50)," +
                "ANID VARCHAR(50)," +
                "INTERESRATE DOUBLE," +
                "ACCOUNTTYP VARCHAR(255)," +
                "ACCOUNTTYPEID INTEGER)");

        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(1,'2095','0002','34','0000000010',0.0098999,'Savings account',1)");
        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(2,'2095','0000','00','0000000002',0.0125E0,'Personal account',0)");
        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(3,'2095','0000','00','0000000003',0.043E0,'Savings account',1)");

    }


    @AfterAll
    void tearDown() throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();

        statement.executeUpdate("DROP TABLE BRANCHES");
        statement.executeUpdate("DROP TABLE ACCOUNTS");

    }

    @Nested
    class BranchCRUD {


        @Test
        void when_branchQuery_receive_keysValues_and_attributes_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0001);

            List<String> attributes = new ArrayList();
            attributes.add("OFFICEID");
            attributes.add("NAME");
            attributes.add("ADDRESS");
            attributes.add("PHONE");

            EntityResult result = iBranchService.branchQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals(0001, recordValues.get("OFFICEID"));

            assertEquals("IMATIABANK", recordValues.get("NAME"));

        }


        @Test
        void when_branchPaginationQuery_receive_keysValues_and_attributes_and_recordNumber_and_startIndex_and_orderBy_expected_AdvacedEntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0001);

            List<String> attributes = new ArrayList();
            attributes.add("OFFICEID");
            attributes.add("NAME");
            attributes.add("ADDRESS");
            attributes.add("PHONE");

            List<Object> orderBy = new ArrayList();
            orderBy.add("NAME");

            AdvancedEntityResult eResult = iBranchService.branchPaginationQuery(keysValues, attributes, 3, 0, orderBy);

            assertEquals(1, eResult.calculateRecordNumber());
            Map recordValues = eResult.getRecordValues(0);

            assertEquals(0001, recordValues.get("OFFICEID"));

            assertEquals("IMATIABANK", recordValues.get("NAME"));

        }

        @Test
        void when_branchInsert_receive_attributes_expected_EntityResult() {

            Map<String, Object> attributesValues = new HashMap();
            attributesValues.put("OFFICEID", 0004);
            attributesValues.put("NAME", "KUTXA2");
            attributesValues.put("ADDRESS", "MOS");
            attributesValues.put("PHONE", 987654321);

            iBranchService.branchInsert(attributesValues);

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("NAME", "KUTXA2");

            List<String> attributesList = new ArrayList();
            attributesList.add("OFFICEID");
            attributesList.add("NAME");
            attributesList.add("ADDRESS");
            attributesList.add("PHONE");
            EntityResult eResultQuery = iBranchService.branchQuery(keysValues, attributesList);

            assertEquals(0004, eResultQuery.getRecordValues(0).get("OFFICEID"));

            assertEquals("KUTXA2", eResultQuery.getRecordValues(0).get("NAME"));
            assertEquals("987654321", eResultQuery.getRecordValues(0).get("PHONE"));

        }

        @Test
        void when_branchUpdate_receive_attributes_and_keysValues_expected_EntityResult() {

            Map<String, Object> attributes = new HashMap();
            attributes.put("NAME", "Coincidir");

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0003);

            iBranchService.branchUpdate(attributes,keysValues);

            List<String> attributesList = new ArrayList();
            attributesList.add("OFFICEID");
            attributesList.add("NAME");
            attributesList.add("ADDRESS");
            attributesList.add("PHONE");

            EntityResult result = iBranchService.branchQuery(keysValues, attributesList);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals("Coincidir", result.getRecordValues(0).get("NAME"));

            assertEquals(0003, recordValues.get("OFFICEID"));

        }

        @Test
        void when_branchDelete_receive_keysValues_expected_EntityResult() {

            Map<String, Object> keysValues = new HashMap();
            keysValues.put("OFFICEID", 0004);

            iBranchService.branchDelete(keysValues);

            List<String> attributesList = new ArrayList();
            attributesList.add("OFFICEID");
            attributesList.add("NAME");
            attributesList.add("ADDRESS");
            attributesList.add("PHONE");
            EntityResult eResultQuery = iBranchService.branchQuery(keysValues, attributesList);

            assertNull(eResultQuery.getRecordValues(0).get("OFFICEID"));

        }

    }

}
