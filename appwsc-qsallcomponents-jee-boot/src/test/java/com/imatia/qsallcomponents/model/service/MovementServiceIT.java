package com.imatia.qsallcomponents.model.service;


import com.imatia.qsallcomponents.api.services.IMovementService;
import com.imatia.qsallcomponents.model.dao.MovementDao;
import com.imatia.qsallcomponents.model.dao.MovementTypeDao;
import com.ontimize.jee.common.dto.EntityResult;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(classes = {MovementService.class,
        MovementDao.class,
        MovementTypeDao.class
})

@ExtendWith(SpringExtension.class)
@EnableAutoConfiguration
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MovementServiceIT {

    @Autowired
    IMovementService iMovementService;

    @Autowired
    DataSource dataSource;

    @BeforeAll
    void initDataBase() throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();

        statement.execute("CREATE TABLE MOVEMENTS(MOVEMENTID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ACCOUNTID INTEGER NOT NULL," +
                "DATE_ TIMESTAMP," +
                "CONCEPT VARCHAR(50)," +
                "MOVEMENTTYPEID INTEGER," +
                "MOVEMENT DOUBLE," +
                "COMMENTS VARCHAR(16777216)," +
                "CONCEPT_EN_US VARCHAR(50)," +
                "CONCEPT_ES_ES VARCHAR(50)," +
                "CONCEPT_GL_ES VARCHAR(50)," +
                "COMMENTS_EN_US VARCHAR(16777216)," +
                "COMMENTS_ES_ES VARCHAR(16777216)," +
                "COMMENTS_GL_ES VARCHAR(16777216))");
        statement.executeUpdate("INSERT INTO MOVEMENTS VALUES(75739,1,'2018-01-14 20:19:28.696000','First movement',1,3225.54E0,NULL,'First movement','Primer movimiento',NULL,NULL,NULL,NULL)");
        statement.executeUpdate("INSERT INTO MOVEMENTS VALUES(75740,2,'2018-02-26 16:36:54.205000','Account registration',1,7498.78E0,NULL,'Account registration','Alta de cuenta',NULL,NULL,NULL,NULL)");
        statement.executeUpdate("INSERT INTO MOVEMENTS VALUES(75741,3,'2018-01-23 12:37:38.846000','Open account',1,9461.98E0,NULL,'Open account','Apertura de cuenta',NULL,NULL,NULL,NULL)");

        statement.execute("CREATE TABLE ACCOUNTS(ACCOUNTID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "ENTITYID VARCHAR(50) NOT NULL," +
                "OFFICEID VARCHAR(50) NOT NULL," +
                "CDID VARCHAR(50)," +
                "ANID VARCHAR(50)," +
                "STARTDATE TIMESTAMP," +
                "ENDDATE TIMESTAMP," +
                "INTERESRATE DOUBLE," +
                "ACCOUNTTYP VARCHAR(255)," +
                "ACCOUNTTYPEID INTEGER)");

        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(1,'2095','0002','34','0000000010','2018-02-21 22:42:23.248000',NULL,0.009899999999999999E0,'Savings account',1)");
        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(2,'2095','0000','00','0000000002','2018-01-16 14:52:22.486000',NULL,0.0125E0,'Personal account',0)");
        statement.executeUpdate("INSERT INTO ACCOUNTS VALUES(3,'2095','0000','00','0000000003','2018-02-15 06:10:48.576000',NULL,0.043E0,'Savings account',1)");


        statement.execute("CREATE TABLE MOVEMENTTYPES(MOVEMENTTYPEID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "DESCRIPTION VARCHAR(50)," +
                "DESCRIPTION_EN_US VARCHAR(50)," +
                "DESCRIPTION_ES_ES VARCHAR(50)," +
                "DESCRIPTION_GL_ES VARCHAR(50))");
        statement.executeUpdate("INSERT INTO MOVEMENTTYPES VALUES(1,'Transfer','Transfer','Transfer','Transfer')");
        statement.executeUpdate("INSERT INTO MOVEMENTTYPES VALUES(2,'Automatic Cash','Automatic Cash','Automatic Cash','Automatic Cash')");
        statement.executeUpdate("INSERT INTO MOVEMENTTYPES VALUES(3,'Salary','Salary','Salary','Salary')");
    }


    @AfterAll
    void tearDown() throws SQLException {

        Connection con = dataSource.getConnection();
        Statement statement = con.createStatement();

        statement.executeUpdate("DROP TABLE MOVEMENTS");
        statement.executeUpdate("DROP TABLE ACCOUNTS");
        statement.executeUpdate("DROP TABLE MOVEMENTTYPES");


    }


    @Nested
    class MovementsCRUD {


        @Test
        void when_branchQuery_receive_keysValues_and_attributes_expected_EntityResult() {
            Map<String, Object> keysValues = new HashMap();
            keysValues.put("MOVEMENTID", 75739);

            List<String> attributes = new ArrayList();
            attributes.add("MOVEMENTID");
            attributes.add("ACCOUNTID");
            attributes.add("CONCEPT");
            attributes.add("MOVEMENTTYPEID");
            attributes.add("MOVEMENT");

            EntityResult result = iMovementService.movementQuery(keysValues, attributes);

            assertEquals(1, result.calculateRecordNumber());
            Map recordValues = result.getRecordValues(0);

            assertEquals(75739, recordValues.get("MOVEMENTID"));

            assertEquals("First movement", recordValues.get("CONCEPT"));

        }
    }

}
